class Node{
     public:
     int data;
     Node* left;
     Node* right;
     Node(int d)
     {
         data=d;
         left =NULL;
         right = NULL;
     }
 };

class cmp{
     public:
     bool operator()(Node* a,Node* b)
     {
         return a->data > b->data;
     }
};
class Solution
{
	public:
	
	
	    void traverse(string temp,vector<string> &ans,Node* root)
	    {
	        if(root->left == NULL || root->right==NULL)
	        {
	            ans.push_back(temp);
	            return;
	        }
	        
	        traverse(temp+'0',ans,root->left);
	        traverse(temp+'1',ans,root->right);
	    }
		vector<string> huffmanCodes(string s,vector<int> f,int n)
		{
		    priority_queue<Node* ,vector<Node*>,cmp> p;
		    for(int i=0;i<n;i++)
		    {
		        Node* temp = new Node(f[i]);
		        p.push(temp);
		    }
		    
		    while(p.size()>1)
		    {
		        Node* top1 = p.top();
		        p.pop();
		        Node* top2 = p.top();
		        p.pop();
		        int sum = top1->data + top2->data;
		        Node* temp = new Node(sum);
		        temp->left = top1;
		        temp->right = top2;
		        p.push(temp);
		    }
		    string temp="";
		    Node* root = p.top();
		    vector<string> ans;
		    traverse(temp,ans,root);
		    returnÂ ans;
		}
};
